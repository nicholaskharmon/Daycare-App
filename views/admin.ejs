<!DOCTYPE html>

<html class="js borderradius js borderradius js borderradius js borderradius js borderradius" lang="en"><!--<![endif]-->
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
        <meta name="viewport" content="width=device-width, minimal-ui">
        <title>Dashboard</title>

		<script src="/javascripts/jquery-1.11.0.min.js"></script>
		<script src="/javascripts/jquery-ui-1.12.1.js"></script>

        <!-- <link type="text/css" rel="stylesheet" href="/public/stylesheets/video-js.css"> -->
        <link type="text/css" rel="stylesheet" href="/stylesheets/jquery-ui-1.8.21.custom.css">
        <link type="text/css" rel="stylesheet" href="/stylesheets/bootstrap.min.css">
        <!-- <link type="text/css" rel="stylesheet" media="all" href="/public/stylesheets/menubar.css"> -->
        <!-- <link type="text/css" rel="stylesheet" href="/public/stylesheets/jquery.fancybox.css" media="screen"> -->
        <!-- <link type="text/css" rel="stylesheet" href="../public/stylesheets/jquery.fancybox-buttons.css" media="screen"> -->
        <!-- <link type="text/css" rel="stylesheet" media="all" href="../public/stylesheets/corporate_style.css"> -->
        <link type="text/css" rel="stylesheet" href="/stylesheets/report.css">
        <link type="text/css" rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
        <!-- <link type="text/css" rel="stylesheet" href="../public/stylesheets/jquery-tilesgallery.css"> -->
        <link type="text/css" rel="stylesheet" href="/stylesheets/jquery.timepicker.css">
		<link rel="stylesheet" href="/stylesheets/jquery-ui-1.12.1.css">

        
		<style type="text/css">
			.fancybox-margin{margin-right:0px;}
			@keyframes resizeanim { from { opacity: 0; } to { opacity: 0; } }
			.resize-triggers { animation: 1ms resizeanim; visibility: hidden; opacity: 0; }
			.resize-triggers, .resize-triggers > div, .contract-trigger:before { 
				content: " "; 
				display: block; 
				position: absolute; 
				top: 0; left: 0; height: 100%; width: 100%; 
				overflow: hidden; 
			}
			.resize-triggers > div { background: #eee; overflow: auto; }
			.contract-trigger:before { width: 200%; height: 200%; }
			.fancybox-margin{margin-right:17px;}
			.fancybox-margin{margin-right:0px;}
			.fancybox-margin{margin-right:17px;}
			.fancybox-margin{margin-right:0px;}
		</style>
		
		<script>
		$(document).ready(function() {
			var note_dialog, 
			  note_note = $( "#note-note" ),
			  note_Fields = $( [] ).add( note_note ),
			  tips = $( ".validateTips" ),
			  uid  = "<%= uid %>",
			  cid = -1,
			  childList = [];
			var nap_dialog, 
			  nap_note = $( "#nap-note" ),
			  nap_from = $( "#nap-from" ),
			  nap_to = $( "#nap-to" ),
			  nap_Fields = $( [] ).add( nap_note ).add(nap_from).add(nap_to);
		 
			function updateTips( t ) {
			  tips
				.text( t )
				.addClass( "ui-state-highlight" );
			  setTimeout(function() {
				tips.removeClass( "ui-state-highlight", 1500 );
			  }, 500 );
			}
		 
			function checkLength( o, n, min, max ) {
			  if ( o.val().length > max || o.val().length < min ) {
				o.addClass( "ui-state-error" );
				updateTips( "Length of " + n + " must be between " +
				  min + " and " + max + "." );
				return false;
			  } else {
				return true;
			  }
			}
			
			// Add note
			function note_click_event(){
				var nid = $(this).attr('id');
				note_note.val($(this).text());
				
				note_dialog = $( "#note-dialog" ).dialog({
				  autoOpen: false,
				  height: 200,
				  width: 530,
				  modal: true,
				  buttons: {
					"Delete": function(){ deleteNote(nid);},
					Cancel: function() {
					  note_dialog.dialog( "close" );
					},
					"Save and Close": function(){ changeNote(nid);}
				  },
				  close: function() {
					note_form[0].reset();
					note_Fields.removeClass( "ui-state-error" );
				  }
				});

				note_form = note_dialog.find( "form" ).on( "submit", function( event ) {
				  event.preventDefault();
				});
				
				note_dialog.dialog("open");
			}	
				
			function addNewNote(cid) {
			  var valid = true;
			  note_Fields.removeClass( "ui-state-error" );
		 
			  valid = valid && checkLength( note_note, "Note", 0, 300 );
		 
			  if ( valid ) {
				// insert note in DB
				var ndate = new Date();
				var rdate = ndate.getFullYear() + '-' + (ndate.getMonth()+1) + '-' + ndate.getDate();
				var btime = ndate.getHours() + ':' + ndate.getMinutes() + ':' + ndate.getSeconds();
				var action_id = '1';
				var action_content = note_note.val();
				<!-- var author = '<%=uid%>'; -->
				var surl = "/new-note?cid=" + cid + 
							"&rdate=" + rdate +
							"&btime=" + btime + 
							"&action_id=" + action_id + 
							"&action_content=" + action_content; 
							<!-- "&author=" + author; -->
				console.log(surl);
				$.ajax({
					url: surl,
					dataType: "JSON", // option
					success: function (data) {
						//alert(data.result);
						// add note in report
						if(data.result == 'success'){
							console.log(cid + "   date=" + rdate);
							loadNotes(cid, rdate);
						}
					},
					error: function (xhr, status, error) {	alert("error");	}
				});
				note_dialog.dialog( "close" );
			  }
			  return valid;
			}
			
			//	Change note
			function changeNote(nid) {
			  var valid = true;
			  note_Fields.removeClass( "ui-state-error" );
		 
			  valid = valid && checkLength( note_note, "Note", 0, 300 );
		 
			  if ( valid ) {
				// update note in DB
				var ndate = new Date();
				var rdate = ndate.getFullYear() + '-' + (ndate.getMonth()+1) + '-' + ndate.getDate();
				var btime = ndate.getHours() + ':' + ndate.getMinutes() + ':' + ndate.getSeconds();
				var action_content = note_note.val();

				<!-- var author = '<%=uid%>'; -->
				var surl = "/edit-note?id=" + nid + 
							"&rdate=" + rdate +
							"&btime=" + btime + 
							"&action_content=" + action_content; 
							<!-- "&author=" + author; -->
				$.ajax({
					url: surl,
					dataType: "JSON", // option
					success: function (data) {
						loadNotes(cid, rdate);
					},
					error: function (xhr, status, error) { alert("error"); }
				});
				note_dialog.dialog( "close" );
			  }
			  return valid;
			}

			function deleteNote(nid) {
				var ndate = new Date();
				var rdate = ndate.getFullYear() + '-' + (ndate.getMonth()+1) + '-' + ndate.getDate();
			  var valid = true;
			  note_Fields.removeClass( "ui-state-error" );
		 
			  valid = valid && checkLength( note, "Note", 0, 300 );
		 
			  if ( valid ) {
				// delete note from DB
				<!-- var author = '<%=uid%>'; -->
				var surl = "/delete-note?id=" + nid;
				console.log(nid);
							
				$.ajax({
					url: surl,
					dataType: "JSON", // option
					success: function (data) {
						loadNotes(cid, rdate);
					},
					error: function (xhr, status, error) {	alert("error");	}
				});
				note_dialog.dialog( "close" );
			  }
			  return valid;
			}
			
			// Add nap
			function nap_click_event(){
				var nid = $(this).attr('id');
				nap_note.val($(".nap-note-"+ nid).text());
			  
				var scontent = $(".nap-content-"+ nid).text();

				console.log("content=" + scontent);
				var pfrom = scontent.indexOf("from") + 5;
				var pto = scontent.indexOf("to");

				var btime = scontent.substring(pfrom, pto).trim();
				var etime = scontent.substring(pto + 2).trim();
				
				console.log(btime + " : " + etime);
				
				nap_from.val(btime);
				nap_to.val(etime);
				
				nap_dialog = $( "#nap-dialog" ).dialog({
				  autoOpen: false,
				  height: 400,
				  width: 530,
				  modal: true,
				  buttons: {
					"Delete": function(){ deleteNap(nid);},
					Cancel: function() {
					  nap_dialog.dialog( "close" );
					},
					"Save and Close": function(){ changeNap(nid);}
				  },
				  close: function() {
					nap_form[0].reset();
					nap_Fields.removeClass( "ui-state-error" );
				  }
				});

				nap_form = nap_dialog.find( "form" ).on( "submit", function( event ) {
				  event.preventDefault();
				});
				
				nap_dialog.dialog("open");
			}	
			// Add new nap	
			function addNewNap(cid) {
				var valid = true;
				nap_Fields.removeClass( "ui-state-error" );
				var btime = nap_from.val();
				var etime = nap_to.val();
				
			  if(btime > etime) {
				alert("Start time must be earlier than end time.");
				return false;
			  }
			  if(btime == '' || btime == undefined) {
				alert("Select start time please.");
				return false;
			  }
			  if(etime == '' || etime == undefined) {
				alert("Select end time please.");
				return false;
			  }

			  valid = valid && checkLength( nap_note, "Note", 0, 300 );
		 
			  if ( valid ) {
				// insert note in DB
				var ndate = new Date();
				var rdate = ndate.getFullYear() + '-' + (ndate.getMonth()+1) + '-' + ndate.getDate();
				var action_id = '2';
				var action_content = nap_note.val();
				<!-- var author = '<%=uid%>'; -->
				var surl = "/new-nap?cid=" + cid + 
							"&rdate=" + rdate +
							"&btime=" + btime + 
							"&etime=" + etime + 
							"&action_id=" + action_id + 
							"&action_content=" + action_content; 
							<!-- "&author=" + author; -->
				console.log(surl);
				$.ajax({
					url: surl,
					dataType: "JSON", // option
					success: function (data) {
						//alert(data.result);
						// add note in report
						if(data.result == 'success'){
							console.log(cid + "   date=" + rdate);
							loadNaps(cid, rdate);
						}
					},
					error: function (xhr, status, error) {	alert("error");	}
				});
				nap_dialog.dialog( "close" );
			  }
			  return valid;
			}
			
			//	Change nap
			function changeNap(nid) {
			  var valid = true;
			  nap_Fields.removeClass( "ui-state-error" );

			  var btime = nap_from.val();
			  var etime = nap_to.val();
			  
			  console.log("btime=" + btime + "  endtime=" + etime);
			  
			  if(btime > etime) {
				alert("Start time must be earlier than end time.");
				return false;
			  }
			  if(btime == '' || btime == undefined) {
				alert("Select start time please.");
				return false;
			  }
			  if(etime == '' || etime == undefined) {
				alert("Select end time please.");
				return false;
			  }
		 
			  valid = valid && checkLength( nap_note, "Note", 0, 300 );
		 
			  if ( valid ) {
				// update note in DB
				var ndate = new Date();
				var rdate = ndate.getFullYear() + '-' + (ndate.getMonth()+1) + '-' + ndate.getDate();
				var action_content = nap_note.val();

				<!-- var author = '<%=uid%>'; -->
				var surl = "/edit-nap?id=" + nid + 
							"&rdate=" + rdate +
							"&btime=" + btime + 
							"&etime=" + etime + 
							"&action_content=" + action_content; 
							<!-- "&author=" + author; -->
				$.ajax({
					url: surl,
					dataType: "JSON", // option
					success: function (data) {
						loadNaps(cid, rdate);
					},
					error: function (xhr, status, error) { alert("error"); }
				});
				nap_dialog.dialog( "close" );
			  }
			  return valid;
			}

			function deleteNap(nid) {
				var ndate = new Date();
				var rdate = ndate.getFullYear() + '-' + (ndate.getMonth()+1) + '-' + ndate.getDate();
			  var valid = true;
			  nap_Fields.removeClass( "ui-state-error" );
		 
//			  valid = valid && checkLength( note, "Note", 0, 300 );
		 
//			  if ( valid ) {
				// delete note from DB
				<!-- var author = '<%=uid%>'; -->
				var surl = "/delete-nap?id=" + nid;
				console.log(nid);
							
				$.ajax({
					url: surl,
					dataType: "JSON", // option
					success: function (data) {
						loadNaps(cid, rdate);
					},
					error: function (xhr, status, error) {	alert("error");	}
				});
				nap_dialog.dialog( "close" );
//			  }
			  return valid;
			}

			function loadChildList(){
				$.ajax({
					url : "/getChildList",
					dataType : "JSON",
					success : function(data){
						console.log(data);
						childList = data;
						
						var ul_childs = $(".ul-childs");
				
						if(childList != undefined){
							ul_childs.empty();
							
							for(i = 0; i < childList.length; i++){
								ul_childs.append( '<li style="width: 85px; height: 85px; margin: 2px;" id="' + childList[i].cid + '" class="child_item">' +
														'<div class="tile pointable" style="background-image: url(' + childList[i].imgsrc + ');">' +
															'<div  style="height:100%">' +
																'<div class="note mask" >' +
																	'<span id="cname-' + childList[i].cid + '">' + childList[i].child_name + '</span>' +
																'</div>' +
																		<!-- <div class="footer note opened" >opened</div> -->
																'<div class="fill inside-border tile-menu-border"></div>' +
															'</div>' +
														'</div>' +
													'</li>'
												);
								$("#"+ childList[i].cid).on("click", function(){
									cid = $(this).attr('id');
									var today = new Date()
									var stoday = today.getFullYear() + "-" + (today.getMonth() + 1) + "-" + today.getDate();
									
									$(".child-name").text($("#cname-" + cid).text(););
									
									console.log('cid=' + cid + ' date=' + stoday);
									loadReport(cid, stoday);
								});
							}
						}
					},
					error: function (xhr, status, error) {
						alert("error")
					}
				})
			}

			function loadReport(cid, stoday){
				if(cid < 0) return;
				
				loadNotes(cid, stoday);
				loadNaps(cid, stoday);
				//loadMeals(cid, stoday);
				//loadDiapers(cid, stoday);
				//loadBathroom(cid, stoday);
				//loadActivity(cid, stoday);
				//loadMedication(cid, stoday);
			}
			// get action data from DB. 
			// cid=child_id, 
			// action={1:note,2:naps,3:meal,4:diapers,5:bathroom,6:activity,7:medication,8:snapshots}
			
			// Load Notes of Report
			function loadNotes(cid, stoday){
				$.ajax({
					url : "/getAction?action=1&cid=" + cid + "&stoday=" + stoday,
					dataType : "JSON",
					success : function(data){ 
						var notes = data;
						var notelist = $("ul.ul-note");
						
						notelist.empty();
						
						notelist.append('<li class="editable dr-add li-add-note" ><i class="fa fa-edit"></i>add note...</li>');
						$(".li-add-note").on("click", function(){ 
							console.log("add note click");
							note_dialog = $( "#note-dialog" ).dialog({
							  autoOpen: false,
							  height: 200,
							  width: 530,
							  modal: true,
							  buttons: {
								Cancel: function() { note_dialog.dialog( "close" );	},
								"Save and Close": function(){ addNewNote(cid);}
							  },
							  close: function() {
								note_form[0].reset();
								note_Fields.removeClass( "ui-state-error" );
							  }
							});
							
							note_form = note_dialog.find( "form" ).on( "submit", function( event ) {
								event.preventDefault();
							});
 
							note_dialog.dialog("open");
						});

						for(i=0; i < notes.length; i++){
							var nid = notes[i].id;
							notelist.append('<li style="margin-bottom:10px;"  class="editable pointable">' +
								'<div style="width:100%">' +
									'<i class="fa fa-edit"></i>' +
									'<span class="dr-note note-' + nid + '" id="' + nid + '">' + notes[i].action_content + '</span>' +
								'</div>' +
							'</li>');
							
							$(".note-"+ nid).on("click", note_click_event);
						}
					},
					error : function (xhr, status, error) {
						alert(error);
					}
				})
			}
			
			// Load Naps of Report
			function loadNaps(cid, stoday){
				$.ajax({
					url : "/getAction?action=2&cid=" + cid + "&stoday=" + stoday,
					dataType : "JSON",
					success : function(data){ 
						var naps = data;
						var naplist = $("ul.ul-nap");   
						
						naplist.empty();
						
						naplist.append('<li class="editable dr-add li-add-nap"><i class="fa fa-edit"></i>add nap...</li>');
						$(".li-add-nap").on("click", function(){
							console.log("add nap click");
							nap_dialog = $( "#nap-dialog" ).dialog({
							  autoOpen: false,
							  height: 400,
							  width: 530,
							  modal: true,
							  buttons: {
								Cancel: function() { nap_dialog.dialog( "close" );	},
								"Save and Close": function(){ addNewNap(cid);}
							  },
							  close: function() {
								nap_form[0].reset();
								nap_Fields.removeClass( "ui-state-error" );
							  }
							});
							
							nap_form = nap_dialog.find( "form" ).on( "submit", function( event ) {
								event.preventDefault();
							});
 
							nap_dialog.dialog("open");
						});
						
						for(i=0; i < naps.length; i++){
							var nid = naps[i].id;
							var btime = naps[i].btime;
							var etime = naps[i].etime;
							var during = naps[i].during;
							
							naplist.append('<li style="white-space:nowrap;margin-bottom:2px" class="editable pointable">' +
								'<div>' +
									'<div style="width:100%">' +
										'<div style="display:inline-block">' + 
											'<span class="dr-primary nap-content-'+ nid + '" style="vertical-align:middle;" id="'+ nid +'">'+
											'slept for ' + during + 'min from ' + btime + ' to ' + etime + '</span>' +
										'</div>' +
										'<div style="margin-left:20px;">' +
											'<span class="dr-note nap-note-' + nid + '" id="'+ nid +'"> -' + naps[i].action_content + '</span>' +
										'</div>' +
									'</div>' +
								'</div>' +
							'</li>');
							$(".nap-content-"+ nid).on("click", nap_click_event);
							
							$(".nap-note-"+ nid).on("click", nap_click_event);
						}
					},
					error : function (xhr, status, error) {
						alert(error);
					}
				})
			}
			
			$(window).load(function () {
				loadChildList();
			});
			
			function ISOtimeformat(){
				var ndate = new Date();
				var tstr = ndate.getHours() + ":";
				if(ndate.getHours() < 10) tstr = "0" + tstr;
				if(ndate.getMinutes() < 10){
					tstr = tstr.concat("0", ndate.getMinutes());
				}else{
					tstr = tstr.concat(ndate.getMinutes());
				}
				return tstr;
			}
			
			$("#nap-btnfrom").click(function(){
				$("#nap-from").val(ISOtimeformat);
			});
			
			$("#nap-btnto").click(function(){
				$("#nap-to").val(ISOtimeformat);
			});
		});
		</script>
	</head>

    <body>
		<!-- Form to add Note  -->
		<div id="note-dialog" title="Add Note" style="display: none;">
		  <p class="validateTips">Note</p>
		  <form>
			<fieldset>
			  <input type="text" id="note-note" style="width:500px; height:40px;" value="" class="textarea ui-widget-content ui-corner-all"></textarea>
		 
			  <!-- Allow form submission with keyboard without duplicating the dialog button -->
			  <input type="submit" tabindex="-1" style="position:absolute; top:-1000px">
			</fieldset>
		  </form>
		</div>

		<!-- Form to add Nap  -->
		<div id="nap-dialog" title="Add Nap" style="display: none;">
		  
		  <form>
			<fieldset>
				<div style="width:50%;">
					<p>From</p>
					<input type="time" id="nap-from">&nbsp;&nbsp;
					<button id="nap-btnfrom" >Now</button>
				</div>
				<div style="width:50%;">
					<p>To</p>
					<input type="time" id="nap-to">&nbsp;&nbsp;
					<button id="nap-btnto" >Now</button>
				</div>
				<p class="validateTips">Note</p>
				<input type="text" id="nap-note" style="width:500px; height:40px;" value="" class="textarea ui-widget-content ui-corner-all"></textarea>
		 
			  <!-- Allow form submission with keyboard without duplicating the dialog button -->
			  <input type="submit" tabindex="-1" style="position:absolute; top:-1000px">
			</fieldset>
		  </form>
		</div>

        <div class="wrapper page-container">
            <div id="app" class="container">
				<div >
					
					<div class="row">  
						<!-- ko if: $root.detailViewPanel.dailyReportsWasActive() -->
						<div >
							<!-- childlist -->
							<div class="thumbnail-panel2 left-panel pull-left">
								<div class="pull-right">
								</div>
								<div>
									<div>
										<h2 class="panel-title"><span class="stat-ok stat-medium" ></span>choose a child</h2>
										<div >
											<ul style="width: 447px; margin: 0px;"  class="thumbnails ul-childs">
											</ul>
										</div>
									</div>
								</div>
							</div>
							<!-- Report Part -->
							<div class="panel3-mid pull-left">
								<div >
									<div class="thumbnail-panel2">
										<!-- Button Part -->
										<div class="pull-right">
											<button class="btn btn-success btn-mini" style="margin-left:5px;">
												Print Report
											</button>
										</div>
										<div class="pull-right">
											<button class="btn btn-danger btn-mini" style="margin-left: 5px; display: none;">
												Audit Report
											</button>
										</div>
										<div class="pull-right">
											<button class="btn btn-danger btn-mini" style="margin-left:5px;">
												Resend Report
											</button>
											<button class="btn btn-danger btn-mini" style="margin-left: 5px; display: none;">
												Send Report
											</button>
										</div>
										
										<!-- Main Part of Report -->
										<div id="dr-printable">
											
											<!-- Report Title -->
											<div style="position:relative;margin-top:21px;">
												<h2 class="panel-title ellipsis" style="padding-bottom:0;width:447px;">
													<span class="stat-ok stat-medium"></span>
													<span style="text-transform:lowercase;">daily report</span>
													&nbsp;for&nbsp;
													<span class="stat-ok child-name" >...</span>
												</h2>
												
												<h2 class="panel-title">for 
													<span class="stat-warn">today</span><!-- /ko -->
												</h2>
											</div>
											
											<!-- Report Body -->
											<div >
												<!-- Note Part -->
												<div class="alert alert-block alert-info" style="padding-right:14px;margin-bottom:0px">
													<h3 class="alert-heading">Notes:</h3>
													<div>
														<ul class="unstyled dr-entries ul-note">  
														</ul>
													</div>
													<!-- ko if: pleaseBrings().length > 0  -->
													<!-- Please bring in the following items: -->
													<!-- <br> -->
													<!-- <ul > -->
														<!-- <li> -->
															<!-- <span>pull-ups</span> -->
														<!-- </li> -->
													
														<!-- <li> -->
															<!-- <span>wipes</span> -->
														<!-- </li> -->
													
														<!-- <li> -->
															<!-- <span>clothes</span> -->
														<!-- </li> -->
													<!-- </ul> -->
													<!-- /ko -->
												</div>
												
												<!-- Naps/Sleep Part -->
												<h2 style="color:#0772A1;">naps/sleep</h2>
												<ul class="unstyled dr-entries ul-nap">
												</ul>
												<!-- Meals Part -->
												<h2 style="color:#00C322;">meals</h2>
												<ul class="unstyled dr-entries ul-meal">
												</ul>
												<!-- Diapers Part -->
												<h2 style="color:#964241;">diapers</h2>
												<ul class="unstyled dr-entries ul-diaper">
												</ul>

												<!-- bathroom Part -->
												<h2 style="color:#964241;">bathroom</h2>
												<ul class="unstyled dr-entries ul-bathroom">
												</ul>

												<!-- medication Part -->
												<h2 style="color:#f00">medications</h2>
												<ul class="unstyled dr-entries ul-medication">
												</ul>

												<!-- activity Part -->
												<div>
													<h2 style="color:#ff9312;">activities</h2>
												</div>
												<ul class="unstyled dr-entries ul-activity">
												</ul>

												<!-- snapshot Part -->
												<h2 style="color:#534d96;">snapshots</h2>
												<ul class="unstyled ul-snapshot" >
													<!-- <li style="margin-bottom:3px;"> -->
														<!-- <table cellpadding="0" cellspacing="0"> -->
															<!-- <tbody> -->
															<!-- <tr> -->
																<!-- <td style="vertical-align:top"> -->
																	<!-- <div class="tile pointable" style="width: 75px; height: 75px; background-image: url('../public/uploads/demo4_small.jpg'); background-color: rgb(221, 221, 221);"  id="t-FDODNOsGS8mvEclf1Ds6Lg"> -->

																		<!-- <a class="fancybox" id="a-FDODNOsGS8mvEclf1Ds6Lg" href="https://www.tadpoles.com/images/1/demo/demo4_large.jpg" type="image" title="Wheeeeeeeeee!"></a> -->
									
																		<!-- <div style="height:100%;position:relative;" > -->

																		<!-- <div class="tile-menu valign" style="display: none;"> -->
																				<!-- <div class="center" style="position:relative; padding:5px;"> -->
																					<!-- <div style="min-height: 20px;"> -->
																						<!-- <button style="width:85%;" class="btn btn-success btn-mini btn-action"> -->
																							<!-- view -->
																						<!-- </button> -->
																					<!-- </div> -->

																					<!-- <div style="min-height: 20px;margin-top: 4px;"> -->
																						<!-- <button style="width:85%;" class="btn btn-info btn-mini btn-action"> -->
																							<!-- edit -->
																						<!-- </button> -->
																					<!-- </div> -->

																					<!-- <div style="min-height: 20px;margin-top: 4px;"> -->
																						<!-- <button style="width:85%;" class="btn btn-danger btn-mini btn-action"> -->
																							<!-- delete -->
																						<!-- </button> -->
																					<!-- </div> -->
																				<!-- </div> -->
																			<!-- </div> -->
																		<!-- </div> -->
																	<!-- </div> -->
																<!-- </td> -->
																<!-- <td style="vertical-align:top"> -->
																	<!-- <div style="margin-left:15px;"> -->
																		<!-- <span class="dr-activity-primary"></span> -->
																		<!-- <span class="dr-note" >Wheeeeeeeeee!</span> -->
																	<!-- </div> -->
																<!-- </td> -->
															<!-- </tr> -->
															<!-- </tbody> -->
														<!-- </table> -->
													<!-- </li> -->
												</ul>
											</div>
										</div>

									</div>
								</div>
							</div>
						</div>
					</div>
				</div>
			</div>
		</div>

		<div id="ui-datepicker-div" class="ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all">
			<div class="ui-datepicker-header ui-widget-header ui-helper-clearfix ui-corner-all">
				<a class="ui-datepicker-prev ui-corner-all ui-state-disabled" title="Prev"><span class="ui-icon ui-icon-circle-triangle-w">Prev</span></a>
				<a class="ui-datepicker-next ui-corner-all" title="Next"><span class="ui-icon ui-icon-circle-triangle-e">Next</span></a>
				<div class="ui-datepicker-title"><span class="ui-datepicker-month">December</span>&nbsp;<span class="ui-datepicker-year">2016</span></div>
			</div>
			<table class="ui-datepicker-calendar">
				<thead>
					<tr>
						<th scope="col" class="ui-datepicker-week-end"><span title="Sunday">Su</span></th>
						<th scope="col"><span title="Monday">Mo</span></th>
						<th scope="col"><span title="Tuesday">Tu</span></th>
						<th scope="col"><span title="Wednesday">We</span></th>
						<th scope="col"><span title="Thursday">Th</span></th>
						<th scope="col"><span title="Friday">Fr</span></th>
						<th scope="col" class="ui-datepicker-week-end"><span title="Saturday">Sa</span></th>
					</tr>
				</thead>
				<tbody>
					<tr>
						<td class=" ui-datepicker-week-end ui-datepicker-other-month ui-datepicker-unselectable ui-state-disabled">&nbsp;</td>
						<td class=" ui-datepicker-other-month ui-datepicker-unselectable ui-state-disabled">&nbsp;</td>
						<td class=" ui-datepicker-other-month ui-datepicker-unselectable ui-state-disabled">&nbsp;</td>
						<td class=" ui-datepicker-other-month ui-datepicker-unselectable ui-state-disabled">&nbsp;</td>
						<td class=" ui-datepicker-days-cell-over  ui-datepicker-current-day ui-datepicker-today"><a class="ui-state-default ui-state-highlight ui-state-active" href="https://www.tadpoles.com/demo#">1</a></td>
						<td class=" " ><a class="ui-state-default" href="https://www.tadpoles.com/demo#">2</a></td>
						<td class=" ui-datepicker-week-end " ><a class="ui-state-default" href="https://www.tadpoles.com/demo#">3</a></td>
					</tr>
					<tr>
						<td class=" ui-datepicker-week-end " ><a class="ui-state-default" href="https://www.tadpoles.com/demo#">4</a></td>
						<td class=" " ><a class="ui-state-default" href="https://www.tadpoles.com/demo#">5</a></td>
						<td class=" " ><a class="ui-state-default" href="https://www.tadpoles.com/demo#">6</a></td>
						<td class=" " ><a class="ui-state-default" href="https://www.tadpoles.com/demo#">7</a></td>
						<td class=" " ><a class="ui-state-default" href="https://www.tadpoles.com/demo#">8</a></td>
						<td class=" " ><a class="ui-state-default" href="https://www.tadpoles.com/demo#">9</a></td>
						<td class=" ui-datepicker-week-end " ><a class="ui-state-default" href="https://www.tadpoles.com/demo#">10</a></td>
					</tr>
					<tr>
						<td class=" ui-datepicker-week-end " ><a class="ui-state-default" href="https://www.tadpoles.com/demo#">11</a></td>
						<td class=" " ><a class="ui-state-default" href="https://www.tadpoles.com/demo#">12</a></td>
						<td class=" " ><a class="ui-state-default" href="https://www.tadpoles.com/demo#">13</a></td>
						<td class=" " ><a class="ui-state-default" href="https://www.tadpoles.com/demo#">14</a></td>
						<td class=" " ><a class="ui-state-default" href="https://www.tadpoles.com/demo#">15</a></td>
						<td class=" " ><a class="ui-state-default" href="https://www.tadpoles.com/demo#">16</a></td>
						<td class=" ui-datepicker-week-end " ><a class="ui-state-default" href="https://www.tadpoles.com/demo#">17</a></td>
					</tr>
					<tr>
						<td class=" ui-datepicker-week-end " ><a class="ui-state-default" href="https://www.tadpoles.com/demo#">18</a></td>
						<td class=" " ><a class="ui-state-default" href="https://www.tadpoles.com/demo#">19</a></td>
						<td class=" " ><a class="ui-state-default" href="https://www.tadpoles.com/demo#">20</a></td>
						<td class=" " ><a class="ui-state-default" href="https://www.tadpoles.com/demo#">21</a></td>
						<td class=" " ><a class="ui-state-default" href="https://www.tadpoles.com/demo#">22</a></td>
						<td class=" " ><a class="ui-state-default" href="https://www.tadpoles.com/demo#">23</a></td>
						<td class=" ui-datepicker-week-end " ><a class="ui-state-default" href="https://www.tadpoles.com/demo#">24</a></td>
					</tr>
					<tr>
						<td class=" ui-datepicker-week-end " ><a class="ui-state-default" href="https://www.tadpoles.com/demo#">25</a></td>
						<td class=" " ><a class="ui-state-default" href="https://www.tadpoles.com/demo#">26</a></td>
						<td class=" " ><a class="ui-state-default" href="https://www.tadpoles.com/demo#">27</a></td>
						<td class=" " ><a class="ui-state-default" href="https://www.tadpoles.com/demo#">28</a></td>
						<td class=" " ><a class="ui-state-default" href="https://www.tadpoles.com/demo#">29</a></td>
						<td class=" " ><a class="ui-state-default" href="https://www.tadpoles.com/demo#">30</a></td>
						<td class=" ui-datepicker-week-end " ><a class="ui-state-default" href="https://www.tadpoles.com/demo#">31</a></td>
					</tr>
				</tbody>
			</table>
		</div>
		
		<div class="ui-timepicker-wrapper" tabindex="-1" style="position: absolute; top: 485px; left: 536px; display: none;">
			<ul class="ui-timepicker-list">
				<li>12:00am</li><li>12:05am</li><li>12:10am</li><li>12:15am</li><li>12:20am</li><li>12:25am</li><li>12:30am</li><li>12:35am</li><li>12:40am</li><li>12:45am</li><li>12:50am</li><li>12:55am</li>
				<li>1:00am</li><li>1:05am</li><li>1:10am</li><li>1:15am</li><li>1:20am</li><li>1:25am</li><li>1:30am</li><li>1:35am</li><li>1:40am</li><li>1:45am</li><li>1:50am</li><li>1:55am</li>
				<li>2:00am</li><li>2:05am</li><li>2:10am</li><li>2:15am</li><li>2:20am</li><li>2:25am</li><li>2:30am</li><li>2:35am</li><li>2:40am</li><li>2:45am</li><li>2:50am</li><li>2:55am</li>
				<li>3:00am</li><li>3:05am</li><li>3:10am</li><li>3:15am</li><li>3:20am</li><li>3:25am</li><li>3:30am</li><li>3:35am</li><li>3:40am</li><li>3:45am</li><li>3:50am</li><li>3:55am</li>
				<li>4:00am</li><li>4:05am</li><li>4:10am</li><li>4:15am</li><li>4:20am</li><li>4:25am</li><li>4:30am</li><li>4:35am</li><li>4:40am</li><li>4:45am</li><li>4:50am</li><li>4:55am</li>
				<li>5:00am</li><li>5:05am</li><li>5:10am</li><li>5:15am</li><li>5:20am</li><li>5:25am</li><li>5:30am</li><li>5:35am</li><li>5:40am</li><li>5:45am</li><li>5:50am</li><li>5:55am</li>
				<li>6:00am</li><li>6:05am</li><li>6:10am</li><li>6:15am</li><li>6:20am</li><li>6:25am</li><li>6:30am</li><li>6:35am</li><li>6:40am</li><li>6:45am</li><li>6:50am</li><li>6:55am</li>
				<li>7:00am</li><li>7:05am</li><li>7:10am</li><li>7:15am</li><li>7:20am</li><li>7:25am</li><li>7:30am</li><li>7:35am</li><li>7:40am</li><li>7:45am</li><li>7:50am</li><li>7:55am</li>
				<li>8:00am</li><li>8:05am</li><li>8:10am</li><li>8:15am</li><li>8:20am</li><li>8:25am</li><li>8:30am</li><li>8:35am</li><li>8:40am</li><li>8:45am</li><li>8:50am</li><li>8:55am</li>
				<li>9:00am</li><li>9:05am</li><li>9:10am</li><li>9:15am</li><li>9:20am</li><li>9:25am</li><li>9:30am</li><li>9:35am</li><li>9:40am</li><li>9:45am</li><li>9:50am</li><li>9:55am</li>
				<li>10:00am</li><li>10:05am</li><li>10:10am</li><li>10:15am</li><li>10:20am</li><li>10:25am</li><li>10:30am</li><li>10:35am</li><li>10:40am</li><li>10:45am</li><li>10:50am</li><li>10:55am</li>
				<li>11:00am</li><li>11:05am</li><li>11:10am</li><li>11:15am</li><li>11:20am</li><li>11:25am</li><li>11:30am</li><li>11:35am</li><li>11:40am</li><li>11:45am</li><li>11:50am</li><li>11:55am</li>
				<li>12:00pm</li><li>12:05pm</li><li>12:10pm</li><li>12:15pm</li><li>12:20pm</li><li>12:25pm</li><li>12:30pm</li><li>12:35pm</li><li>12:40pm</li><li>12:45pm</li><li>12:50pm</li><li>12:55pm</li>
				<li>1:00pm</li><li>1:05pm</li><li>1:10pm</li><li>1:15pm</li><li>1:20pm</li><li>1:25pm</li><li>1:30pm</li><li>1:35pm</li><li>1:40pm</li><li>1:45pm</li><li>1:50pm</li><li>1:55pm</li>
				<li>2:00pm</li><li>2:05pm</li><li>2:10pm</li><li>2:15pm</li><li>2:20pm</li><li>2:25pm</li><li>2:30pm</li><li>2:35pm</li><li>2:40pm</li><li>2:45pm</li><li>2:50pm</li><li>2:55pm</li>
				<li>3:00pm</li><li>3:05pm</li><li>3:10pm</li><li>3:15pm</li><li>3:20pm</li><li>3:25pm</li><li>3:30pm</li><li>3:35pm</li><li>3:40pm</li><li>3:45pm</li><li>3:50pm</li><li>3:55pm</li>
				<li>4:00pm</li><li>4:05pm</li><li>4:10pm</li><li>4:15pm</li><li>4:20pm</li><li>4:25pm</li><li>4:30pm</li><li>4:35pm</li><li>4:40pm</li><li>4:45pm</li><li>4:50pm</li><li>4:55pm</li>
				<li>5:00pm</li><li>5:05pm</li><li>5:10pm</li><li>5:15pm</li><li>5:20pm</li><li>5:25pm</li><li>5:30pm</li><li>5:35pm</li><li>5:40pm</li><li>5:45pm</li><li>5:50pm</li><li>5:55pm</li>
				<li>6:00pm</li><li>6:05pm</li><li>6:10pm</li><li>6:15pm</li><li>6:20pm</li><li>6:25pm</li><li>6:30pm</li><li>6:35pm</li><li>6:40pm</li><li>6:45pm</li><li>6:50pm</li><li>6:55pm</li>
				<li>7:00pm</li><li>7:05pm</li><li>7:10pm</li><li>7:15pm</li><li>7:20pm</li><li>7:25pm</li><li>7:30pm</li><li>7:35pm</li><li>7:40pm</li><li>7:45pm</li><li>7:50pm</li><li>7:55pm</li>
				<li>8:00pm</li><li>8:05pm</li><li>8:10pm</li><li>8:15pm</li><li>8:20pm</li><li>8:25pm</li><li>8:30pm</li><li>8:35pm</li><li>8:40pm</li><li>8:45pm</li><li>8:50pm</li><li>8:55pm</li>
				<li>9:00pm</li><li>9:05pm</li><li>9:10pm</li><li>9:15pm</li><li>9:20pm</li><li>9:25pm</li><li>9:30pm</li><li>9:35pm</li><li>9:40pm</li><li>9:45pm</li><li>9:50pm</li><li>9:55pm</li>
				<li>10:00pm</li><li>10:05pm</li><li>10:10pm</li><li>10:15pm</li><li>10:20pm</li><li>10:25pm</li><li>10:30pm</li><li>10:35pm</li><li>10:40pm</li><li>10:45pm</li><li>10:50pm</li><li>10:55pm</li>
				<li>11:00pm</li><li>11:05pm</li><li>11:10pm</li><li>11:15pm</li><li>11:20pm</li><li>11:25pm</li><li>11:30pm</li><li>11:35pm</li><li>11:40pm</li><li>11:45pm</li><li>11:50pm</li><li>11:55pm</li>
			</ul>
		</div>
		<script>
		function inject() {

			var originalOpenWndFnKey = "originalOpenFunction";

			var originalWindowOpenFn 	= window.open,
			    originalCreateElementFn = document.createElement,
			    originalCreateEventFn 	= document.createEvent,
				windowsWithNames = {};
			var timeSinceCreateAElement = 0;
			var lastCreatedAElement = null;
			var fullScreenOpenTime;
			var parentOrigin = (window.location != window.parent.location) ? document.referrer: document.location;

			window[originalOpenWndFnKey] = window.open; // save the original open window as global param

			function newWindowOpenFn() {

				var openWndArguments = arguments,
					useOriginalOpenWnd = true,
					generatedWindow = null;

				function blockedWndNotification(openWndArguments) {
					parent.postMessage({ type: "blockedWindow", args: JSON.stringify(openWndArguments) }, parentOrigin);
				}

				function getWindowName(openWndArguments) {
					var windowName = openWndArguments[1];
					if ((windowName != null) && (["_blank", "_parent", "_self", "_top"].indexOf(windowName) < 0)) {
						return windowName;
					}

					return null;
				}

				function copyMissingProperties(src, dest) {
					var prop;
					for(prop in src) {
						try {
							if (dest[prop] === undefined) {
								dest[prop] = src[prop];
						}
						} catch (e) {}
					}
					return dest;
				}

					// the element who registered to the event
					var capturingElement = null;
					if (window.event != null) {
						capturingElement = window.event.currentTarget;
					}

					if (capturingElement == null) {
						var caller = openWndArguments.callee;
						while ((caller.arguments != null) && (caller.arguments.callee.caller != null)) {
							caller = caller.arguments.callee.caller;
						}
						if ((caller.arguments != null) && (caller.arguments.length > 0) && (caller.arguments[0].currentTarget != null)) {
							capturingElement = caller.arguments[0].currentTarget;
						}
					}

				/////////////////////////////////////////////////////////////////////////////////
				// Blocked if a click on background element occurred (<body> or document)
				/////////////////////////////////////////////////////////////////////////////////

					if ((capturingElement != null) && (
							(capturingElement instanceof Window) ||
							(capturingElement === document) ||
							(
								(capturingElement.URL != null) && (capturingElement.body != null)
							) ||
							(
								(capturingElement.nodeName != null) && (
									(capturingElement.nodeName.toLowerCase() == "body") ||
									(capturingElement.nodeName.toLowerCase() == "#document")
								)
							)
						)) {
							window.pbreason = "Blocked a new window opened with URL: " + openWndArguments[0] + " because it was triggered by the " + capturingElement.nodeName + " element";
							// console.info(window.pbreason);
							useOriginalOpenWnd = false;
					} else {
						useOriginalOpenWnd = true;
					}
				/////////////////////////////////////////////////////////////////////////////////



				/////////////////////////////////////////////////////////////////////////////////
				// Block if a full screen was just initiated while opening this url.
				/////////////////////////////////////////////////////////////////////////////////

					// console.info("fullscreen: " + ((new Date()).getTime() - fullScreenOpenTime));
					// console.info("webkitFullscreenElement: " + document.webkitFullscreenElement);
					var fullScreenElement = document.webkitFullscreenElement || document.mozFullscreenElement || document.fullscreenElement
					if ((((new Date()).getTime() - fullScreenOpenTime) < 1000) || ((isNaN(fullScreenOpenTime) && (isDocumentInFullScreenMode())))) {

						window.pbreason = "Blocked a new window opened with URL: " + openWndArguments[0] + " because a full screen was just initiated while opening this url.";
						// console.info(window.pbreason);

						/* JRA REMOVED
						if (window[script_params.fullScreenFnKey]) {
							window.clearTimeout(window[script_params.fullScreenFnKey]);
						}
						*/

						if (document.exitFullscreen) {
							document.exitFullscreen();
						}
						else if (document.mozCancelFullScreen) {
							document.mozCancelFullScreen();
						}
						else if (document.webkitCancelFullScreen) {
							document.webkitCancelFullScreen();
						}

						useOriginalOpenWnd = false;
					}
				/////////////////////////////////////////////////////////////////////////////////


				if (useOriginalOpenWnd == true) {

					// console.info("allowing new window to be opened with URL: " + openWndArguments[0]);

					generatedWindow = originalWindowOpenFn.apply(this, openWndArguments);

					// save the window by name, for latter use.
					var windowName = getWindowName(openWndArguments);
					if (windowName != null) {
						windowsWithNames[windowName] = generatedWindow;
					}

					// 2nd line of defence: allow window to open but monitor carefully...

					/////////////////////////////////////////////////////////////////////////////////
					// Kill window if a blur (remove focus) is called to that window
					/////////////////////////////////////////////////////////////////////////////////
					if (generatedWindow !== window) {
						var openTime = (new Date()).getTime();
						var originalWndBlurFn = generatedWindow.blur;
						generatedWindow.blur = function() {
							if (((new Date()).getTime() - openTime) < 1000 /* one second */) {
								window.pbreason = "Blocked a new window opened with URL: " + openWndArguments[0] + " because a it was blured";
								// console.info(window.pbreason);
								generatedWindow.close();
								blockedWndNotification(openWndArguments);
							} else {
								// console.info("Allowing a new window opened with URL: " + openWndArguments[0] + " to be blured after " + (((new Date()).getTime() - openTime)) + " seconds");
								originalWndBlurFn();
							}
						};
					}
					/////////////////////////////////////////////////////////////////////////////////

				} else { // (useOriginalOpenWnd == false)

						var location = {
							href: openWndArguments[0]
						};
						location.replace = function(url) {
							location.href = url;
						};

						generatedWindow = {
							close:						function() {return true;},
							test:						function() {return true;},
							blur:						function() {return true;},
							focus:						function() {return true;},
							showModelessDialog:			function() {return true;},
							showModalDialog:			function() {return true;},
							prompt:						function() {return true;},
							confirm:					function() {return true;},
							alert:						function() {return true;},
							moveTo:						function() {return true;},
							moveBy:						function() {return true;},
							resizeTo:					function() {return true;},
							resizeBy:					function() {return true;},
							scrollBy:					function() {return true;},
							scrollTo:					function() {return true;},
							getSelection:				function() {return true;},
							onunload:					function() {return true;},
							print:						function() {return true;},
							open:						function() {return this;},
							opener:						window,
							closed:						false,
							innerHeight:				480,
							innerWidth:					640,
							name:						openWndArguments[1],
							location:					location,
							document:					{location: location}
						};

					copyMissingProperties(window, generatedWindow);

					generatedWindow.window = generatedWindow;

					var windowName = getWindowName(openWndArguments);
					if (windowName != null) {
						try {
							// originalWindowOpenFn("", windowName).close();
							windowsWithNames[windowName].close();
							// console.info("Closed window with the following name: " + windowName);
						} catch (err) {
							// console.info("Couldn't close window with the following name: " + windowName);
						}
					}

					setTimeout(function() {
						var url;
						if (!(generatedWindow.location instanceof Object)) {
							url = generatedWindow.location;
						} else if (!(generatedWindow.document.location instanceof Object)) {
							url = generatedWindow.document.location;
						} else if (location.href != null) {
							url = location.href;
						} else {
							url = openWndArguments[0];
						}
						openWndArguments[0] = url;
						blockedWndNotification(openWndArguments);
					}, 100);
				}

				return generatedWindow;
			}


			/////////////////////////////////////////////////////////////////////////////////
			// Replace the window open method with Poper Blocker's
			/////////////////////////////////////////////////////////////////////////////////
			window.open = function() {
				try {
					return newWindowOpenFn.apply(this, arguments);
				} catch(err) {
					return null;
				}
			};
			/////////////////////////////////////////////////////////////////////////////////



			//////////////////////////////////////////////////////////////////////////////////////////////////////////
			// Monitor dynamic html element creation to prevent generating <a> elements with click dispatching event
			//////////////////////////////////////////////////////////////////////////////////////////////////////////
			document.createElement = function() {

					var newElement = originalCreateElementFn.apply(document, arguments);

					if (arguments[0] == "a" || arguments[0] == "A") {

						timeSinceCreateAElement = (new Date).getTime();

						var originalDispatchEventFn = newElement.dispatchEvent;

						newElement.dispatchEvent = function(event) {
							if (event.type != null && (("" + event.type).toLocaleLowerCase() == "click")) {
								window.pbreason = "blocked due to an explicit dispatchEvent event with type 'click' on an 'a' tag";
								// console.info(window.pbreason);
								parent.postMessage({type:"blockedWindow", args: JSON.stringify({"0": newElement.href}) }, parentOrigin);
								return true;
							}

							return originalDispatchEventFn(event);
						};

						lastCreatedAElement = newElement;

					}

					return newElement;
			};
			/////////////////////////////////////////////////////////////////////////////////

			/////////////////////////////////////////////////////////////////////////////////
			// Block artificial mouse click on frashly created <a> elements
			/////////////////////////////////////////////////////////////////////////////////
			document.createEvent = function() {
				try {
					if ((arguments[0].toLowerCase().indexOf("mouse") >= 0) && ((new Date).getTime() - timeSinceCreateAElement) <= 50) {
						window.pbreason = "Blocked because 'a' element was recently created and " + arguments[0] + " event was created shortly after";
						// console.info(window.pbreason);
						arguments[0] = lastCreatedAElement.href;
						parent.postMessage({ type: "blockedWindow", args: JSON.stringify({"0": lastCreatedAElement.href}) }, parentOrigin);
						return null;
					}
					return originalCreateEventFn.apply(document, arguments);
				} catch(err) {}
			};
			/////////////////////////////////////////////////////////////////////////////////





			/////////////////////////////////////////////////////////////////////////////////
			// Monitor full screen requests
			/////////////////////////////////////////////////////////////////////////////////
			function onFullScreen(isInFullScreenMode) {
					if (isInFullScreenMode) {
						fullScreenOpenTime = (new Date()).getTime();
						// console.info("fullScreenOpenTime = " + fullScreenOpenTime);
					} else {
						fullScreenOpenTime = NaN;
					}
			};
			/////////////////////////////////////////////////////////////////////////////////

			function isDocumentInFullScreenMode() {
				// Note that the browser fullscreen (triggered by short keys) might
				// be considered different from content fullscreen when expecting a boolean
				return ((document.fullScreenElement && document.fullScreenElement !== null) ||    // alternative standard methods
					((document.mozFullscreenElement != null) || (document.webkitFullscreenElement != null)));                   // current working methods
			}

			document.addEventListener("fullscreenchange", function () {
				onFullScreen(document.fullscreen);
			}, false);

			document.addEventListener("mozfullscreenchange", function () {
				onFullScreen(document.mozFullScreen);
			}, false);

			document.addEventListener("webkitfullscreenchange", function () {
				onFullScreen(document.webkitIsFullScreen);
			}, false);

		} inject()
	</script>
	
	</body>
</html>